type ContractURIUpdated @entity(immutable: true) {
  id: Bytes!
  prevURI: String! # string
  newURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExtensionAdded @entity(immutable: true) {
  id: Bytes!
  name: Bytes! # string
  implementation: Bytes! # address
  extension_metadata_name: String! # string
  extension_metadata_metadataURI: String! # string
  extension_metadata_implementation: Bytes! # address
  extension_functions: [Bytes!]! # tuple[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExtensionRemoved @entity(immutable: true) {
  id: Bytes!
  name: Bytes! # string
  extension_metadata_name: String! # string
  extension_metadata_metadataURI: String! # string
  extension_metadata_implementation: Bytes! # address
  extension_functions: [Bytes!]! # tuple[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExtensionReplaced @entity(immutable: true) {
  id: Bytes!
  name: Bytes! # string
  implementation: Bytes! # address
  extension_metadata_name: String! # string
  extension_metadata_metadataURI: String! # string
  extension_metadata_implementation: Bytes! # address
  extension_functions: [Bytes!]! # tuple[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FlatPlatformFeeUpdated @entity(immutable: true) {
  id: Bytes!
  platformFeeRecipient: Bytes! # address
  flatFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FunctionDisabled @entity(immutable: true) {
  id: Bytes!
  name: Bytes! # string
  functionSelector: Bytes! # bytes4
  extMetadata_name: String! # string
  extMetadata_metadataURI: String! # string
  extMetadata_implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FunctionEnabled @entity(immutable: true) {
  id: Bytes!
  name: Bytes! # string
  functionSelector: Bytes! # bytes4
  extFunction_functionSelector: Bytes! # bytes4
  extFunction_functionSignature: String! # string
  extMetadata_name: String! # string
  extMetadata_metadataURI: String! # string
  extMetadata_implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlatformFeeInfoUpdated @entity(immutable: true) {
  id: Bytes!
  platformFeeRecipient: Bytes! # address
  platformFeeBps: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlatformFeeTypeUpdated @entity(immutable: true) {
  id: Bytes!
  feeType: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoyaltyEngineUpdated @entity(immutable: true) {
  id: Bytes!
  previousAddress: Bytes! # address
  newAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type BuyerApprovedForListing @entity(immutable: true) {
  id: Bytes!
  listingId: BigInt! # uint256
  buyer: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CancelledListing @entity(immutable: true) {
  id: Bytes!
  listingCreator: Bytes! # address
  listingId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CurrencyApprovedForListing @entity(immutable: true) {
  id: Bytes!
  listingId: BigInt! # uint256
  currency: Bytes! # address
  pricePerToken: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewListing @entity(immutable: true) {
  id: Bytes!
  listingCreator: Bytes! # address
  listingId: BigInt! # uint256
  assetContract: Bytes! # address
  listing_listingId: BigInt! # uint256
  listing_tokenId: BigInt! # uint256
  listing_quantity: BigInt! # uint256
  listing_pricePerToken: BigInt! # uint256
  listing_startTimestamp: BigInt! # uint128
  listing_endTimestamp: BigInt! # uint128
  listing_listingCreator: Bytes! # address
  listing_assetContract: Bytes! # address
  listing_currency: Bytes! # address
  listing_tokenType: Int! # uint8
  listing_status: Int! # uint8
  listing_reserved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewSale @entity(immutable: true) {
  id: Bytes!
  listingCreator: Bytes! # address
  listingId: BigInt! # uint256
  assetContract: Bytes! # address
  tokenId: BigInt! # uint256
  buyer: Bytes! # address
  quantityBought: BigInt! # uint256
  totalPricePaid: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdatedListing @entity(immutable: true) {
  id: Bytes!
  listingCreator: Bytes! # address
  listingId: BigInt! # uint256
  assetContract: Bytes! # address
  listing_listingId: BigInt! # uint256
  listing_tokenId: BigInt! # uint256
  listing_quantity: BigInt! # uint256
  listing_pricePerToken: BigInt! # uint256
  listing_startTimestamp: BigInt! # uint128
  listing_endTimestamp: BigInt! # uint128
  listing_listingCreator: Bytes! # address
  listing_assetContract: Bytes! # address
  listing_currency: Bytes! # address
  listing_tokenType: Int! # uint8
  listing_status: Int! # uint8
  listing_reserved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
